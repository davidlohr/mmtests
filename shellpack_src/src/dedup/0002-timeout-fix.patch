diff --git a/queue.c b/queue.c
index 823fdc000d05..2d08c1d174b8 100644
--- a/queue.c
+++ b/queue.c
@@ -1,4 +1,5 @@
 #include <assert.h>
+#include <sys/time.h>
 
 #include "util.h"
 #include "queue.h"
@@ -6,6 +7,8 @@
 
 #ifdef ENABLE_PTHREADS
 #include <pthread.h>
+#include <errno.h>
+#include <stdio.h>
 #endif //ENABLE_PTHREADS
 
 void queue_init(queue_t * que, size_t size, int nProducers) {
@@ -86,8 +89,16 @@ int queue_enqueue(queue_t *que, ringbuffer_t *buf, int limit) {
 #ifdef ENABLE_PTHREADS
   pthread_mutex_lock(&que->mutex);
   assert(!queue_isTerminated(que));
-  while (ringbuffer_isFull(&que->buf))
-    pthread_cond_wait(&que->notFull, &que->mutex);
+  while (ringbuffer_isFull(&que->buf)) {
+    struct timeval currentTime;
+    struct timespec timeout;
+
+    gettimeofday(&currentTime, NULL);
+    timeout.tv_sec = currentTime.tv_sec + 10;
+    timeout.tv_nsec = currentTime.tv_usec * 1000UL;
+
+    pthread_cond_timedwait(&que->notFull, &que->mutex, &timeout);
+  }
 #else
   assert(!queue_isTerminated(que));
 #endif
diff --git a/queue.h b/queue.h
index f1c43751f2bf..c5dad71eb2b9 100644
--- a/queue.h
+++ b/queue.h
@@ -42,6 +42,7 @@ typedef struct _queue_t queue_t;
 //Initialize a ring buffer
 static inline int ringbuffer_init(ringbuffer_t *buf, size_t size) {
   //NOTE: We have to allocate one extra element because one element will be unusable (we need to distinguish between full and empty).
+  size *= 2;
   buf->data = (void **)malloc(sizeof(void*) * (size+1));
   buf->size = (size+1);
   buf->head = 0;

